// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/minio/minio/internal/db/mysql/model"
)

func newTNsBucket(db *gorm.DB, opts ...gen.DOOption) tNsBucket {
	_tNsBucket := tNsBucket{}

	_tNsBucket.tNsBucketDo.UseDB(db, opts...)
	_tNsBucket.tNsBucketDo.UseModel(&model.TNsBucket{})

	tableName := _tNsBucket.tNsBucketDo.TableName()
	_tNsBucket.ALL = field.NewAsterisk(tableName)
	_tNsBucket.ID = field.NewInt32(tableName, "id")
	_tNsBucket.CreatedAt = field.NewTime(tableName, "created_at")
	_tNsBucket.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tNsBucket.DeletedAt = field.NewField(tableName, "deleted_at")
	_tNsBucket.Bucketid = field.NewString(tableName, "bucketid")
	_tNsBucket.Name = field.NewString(tableName, "name")
	_tNsBucket.UUID = field.NewString(tableName, "uuid")
	_tNsBucket.Count = field.NewInt64(tableName, "count")
	_tNsBucket.Size = field.NewInt64(tableName, "size")
	_tNsBucket.Owner = field.NewInt32(tableName, "owner")
	_tNsBucket.Tenant = field.NewString(tableName, "tenant")
	_tNsBucket.Policy = field.NewString(tableName, "policy")
	_tNsBucket.Versioning = field.NewString(tableName, "versioning")
	_tNsBucket.Profile = field.NewString(tableName, "profile")
	_tNsBucket.Storageclass = field.NewString(tableName, "storageclass")
	_tNsBucket.Location = field.NewString(tableName, "location")
	_tNsBucket.Encryption = field.NewString(tableName, "encryption")

	_tNsBucket.fillFieldMap()

	return _tNsBucket
}

type tNsBucket struct {
	tNsBucketDo tNsBucketDo

	ALL          field.Asterisk
	ID           field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Bucketid     field.String
	Name         field.String
	UUID         field.String
	Count        field.Int64
	Size         field.Int64
	Owner        field.Int32
	Tenant       field.String
	Policy       field.String
	Versioning   field.String
	Profile      field.String
	Storageclass field.String
	Location     field.String
	Encryption   field.String

	fieldMap map[string]field.Expr
}

func (t tNsBucket) Table(newTableName string) *tNsBucket {
	t.tNsBucketDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tNsBucket) As(alias string) *tNsBucket {
	t.tNsBucketDo.DO = *(t.tNsBucketDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tNsBucket) updateTableName(table string) *tNsBucket {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Bucketid = field.NewString(table, "bucketid")
	t.Name = field.NewString(table, "name")
	t.UUID = field.NewString(table, "uuid")
	t.Count = field.NewInt64(table, "count")
	t.Size = field.NewInt64(table, "size")
	t.Owner = field.NewInt32(table, "owner")
	t.Tenant = field.NewString(table, "tenant")
	t.Policy = field.NewString(table, "policy")
	t.Versioning = field.NewString(table, "versioning")
	t.Profile = field.NewString(table, "profile")
	t.Storageclass = field.NewString(table, "storageclass")
	t.Location = field.NewString(table, "location")
	t.Encryption = field.NewString(table, "encryption")

	t.fillFieldMap()

	return t
}

func (t *tNsBucket) WithContext(ctx context.Context) *tNsBucketDo {
	return t.tNsBucketDo.WithContext(ctx)
}

func (t tNsBucket) TableName() string { return t.tNsBucketDo.TableName() }

func (t tNsBucket) Alias() string { return t.tNsBucketDo.Alias() }

func (t *tNsBucket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tNsBucket) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["bucketid"] = t.Bucketid
	t.fieldMap["name"] = t.Name
	t.fieldMap["uuid"] = t.UUID
	t.fieldMap["count"] = t.Count
	t.fieldMap["size"] = t.Size
	t.fieldMap["owner"] = t.Owner
	t.fieldMap["tenant"] = t.Tenant
	t.fieldMap["policy"] = t.Policy
	t.fieldMap["versioning"] = t.Versioning
	t.fieldMap["profile"] = t.Profile
	t.fieldMap["storageclass"] = t.Storageclass
	t.fieldMap["location"] = t.Location
	t.fieldMap["encryption"] = t.Encryption
}

func (t tNsBucket) clone(db *gorm.DB) tNsBucket {
	t.tNsBucketDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tNsBucket) replaceDB(db *gorm.DB) tNsBucket {
	t.tNsBucketDo.ReplaceDB(db)
	return t
}

type tNsBucketDo struct{ gen.DO }

func (t tNsBucketDo) Debug() *tNsBucketDo {
	return t.withDO(t.DO.Debug())
}

func (t tNsBucketDo) WithContext(ctx context.Context) *tNsBucketDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tNsBucketDo) ReadDB() *tNsBucketDo {
	return t.Clauses(dbresolver.Read)
}

func (t tNsBucketDo) WriteDB() *tNsBucketDo {
	return t.Clauses(dbresolver.Write)
}

func (t tNsBucketDo) Session(config *gorm.Session) *tNsBucketDo {
	return t.withDO(t.DO.Session(config))
}

func (t tNsBucketDo) Clauses(conds ...clause.Expression) *tNsBucketDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tNsBucketDo) Returning(value interface{}, columns ...string) *tNsBucketDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tNsBucketDo) Not(conds ...gen.Condition) *tNsBucketDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tNsBucketDo) Or(conds ...gen.Condition) *tNsBucketDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tNsBucketDo) Select(conds ...field.Expr) *tNsBucketDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tNsBucketDo) Where(conds ...gen.Condition) *tNsBucketDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tNsBucketDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tNsBucketDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tNsBucketDo) Order(conds ...field.Expr) *tNsBucketDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tNsBucketDo) Distinct(cols ...field.Expr) *tNsBucketDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tNsBucketDo) Omit(cols ...field.Expr) *tNsBucketDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tNsBucketDo) Join(table schema.Tabler, on ...field.Expr) *tNsBucketDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tNsBucketDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tNsBucketDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tNsBucketDo) RightJoin(table schema.Tabler, on ...field.Expr) *tNsBucketDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tNsBucketDo) Group(cols ...field.Expr) *tNsBucketDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tNsBucketDo) Having(conds ...gen.Condition) *tNsBucketDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tNsBucketDo) Limit(limit int) *tNsBucketDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tNsBucketDo) Offset(offset int) *tNsBucketDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tNsBucketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tNsBucketDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tNsBucketDo) Unscoped() *tNsBucketDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tNsBucketDo) Create(values ...*model.TNsBucket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tNsBucketDo) CreateInBatches(values []*model.TNsBucket, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tNsBucketDo) Save(values ...*model.TNsBucket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tNsBucketDo) First() (*model.TNsBucket, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucket), nil
	}
}

func (t tNsBucketDo) Take() (*model.TNsBucket, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucket), nil
	}
}

func (t tNsBucketDo) Last() (*model.TNsBucket, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucket), nil
	}
}

func (t tNsBucketDo) Find() ([]*model.TNsBucket, error) {
	result, err := t.DO.Find()
	return result.([]*model.TNsBucket), err
}

func (t tNsBucketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNsBucket, err error) {
	buf := make([]*model.TNsBucket, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tNsBucketDo) FindInBatches(result *[]*model.TNsBucket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tNsBucketDo) Attrs(attrs ...field.AssignExpr) *tNsBucketDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tNsBucketDo) Assign(attrs ...field.AssignExpr) *tNsBucketDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tNsBucketDo) Joins(fields ...field.RelationField) *tNsBucketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tNsBucketDo) Preload(fields ...field.RelationField) *tNsBucketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tNsBucketDo) FirstOrInit() (*model.TNsBucket, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucket), nil
	}
}

func (t tNsBucketDo) FirstOrCreate() (*model.TNsBucket, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucket), nil
	}
}

func (t tNsBucketDo) FindByPage(offset int, limit int) (result []*model.TNsBucket, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tNsBucketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tNsBucketDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tNsBucketDo) Delete(models ...*model.TNsBucket) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tNsBucketDo) withDO(do gen.Dao) *tNsBucketDo {
	t.DO = *do.(*gen.DO)
	return t
}
