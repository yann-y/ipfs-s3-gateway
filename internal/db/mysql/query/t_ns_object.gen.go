// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/minio/minio/internal/db/mysql/model"
)

func newTNsObject(db *gorm.DB, opts ...gen.DOOption) tNsObject {
	_tNsObject := tNsObject{}

	_tNsObject.tNsObjectDo.UseDB(db, opts...)
	_tNsObject.tNsObjectDo.UseModel(&model.TNsObject{})

	tableName := _tNsObject.tNsObjectDo.TableName()
	_tNsObject.ALL = field.NewAsterisk(tableName)
	_tNsObject.ID = field.NewInt32(tableName, "id")
	_tNsObject.CreatedAt = field.NewTime(tableName, "created_at")
	_tNsObject.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tNsObject.DeletedAt = field.NewField(tableName, "deleted_at")
	_tNsObject.Name = field.NewString(tableName, "name")
	_tNsObject.Dirname = field.NewString(tableName, "dirname")
	_tNsObject.Bucket = field.NewString(tableName, "bucket")
	_tNsObject.Cid = field.NewString(tableName, "cid")
	_tNsObject.Etag = field.NewString(tableName, "etag")
	_tNsObject.ContentLength = field.NewInt64(tableName, "content_length")
	_tNsObject.ContentType = field.NewString(tableName, "content_type")
	_tNsObject.Version = field.NewString(tableName, "version")
	_tNsObject.Tags = field.NewString(tableName, "tags")
	_tNsObject.Isdir = field.NewBool(tableName, "isdir")
	_tNsObject.Ismarker = field.NewBool(tableName, "ismarker")
	_tNsObject.Storageclass = field.NewString(tableName, "storageclass")
	_tNsObject.Acl = field.NewString(tableName, "acl")

	_tNsObject.fillFieldMap()

	return _tNsObject
}

type tNsObject struct {
	tNsObjectDo tNsObjectDo

	ALL           field.Asterisk
	ID            field.Int32
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Name          field.String
	Dirname       field.String
	Bucket        field.String
	Cid           field.String
	Etag          field.String
	ContentLength field.Int64
	ContentType   field.String
	Version       field.String
	Tags          field.String
	Isdir         field.Bool
	Ismarker      field.Bool
	Storageclass  field.String
	Acl           field.String

	fieldMap map[string]field.Expr
}

func (t tNsObject) Table(newTableName string) *tNsObject {
	t.tNsObjectDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tNsObject) As(alias string) *tNsObject {
	t.tNsObjectDo.DO = *(t.tNsObjectDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tNsObject) updateTableName(table string) *tNsObject {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Name = field.NewString(table, "name")
	t.Dirname = field.NewString(table, "dirname")
	t.Bucket = field.NewString(table, "bucket")
	t.Cid = field.NewString(table, "cid")
	t.Etag = field.NewString(table, "etag")
	t.ContentLength = field.NewInt64(table, "content_length")
	t.ContentType = field.NewString(table, "content_type")
	t.Version = field.NewString(table, "version")
	t.Tags = field.NewString(table, "tags")
	t.Isdir = field.NewBool(table, "isdir")
	t.Ismarker = field.NewBool(table, "ismarker")
	t.Storageclass = field.NewString(table, "storageclass")
	t.Acl = field.NewString(table, "acl")

	t.fillFieldMap()

	return t
}

func (t *tNsObject) WithContext(ctx context.Context) *tNsObjectDo {
	return t.tNsObjectDo.WithContext(ctx)
}

func (t tNsObject) TableName() string { return t.tNsObjectDo.TableName() }

func (t tNsObject) Alias() string { return t.tNsObjectDo.Alias() }

func (t *tNsObject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tNsObject) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["name"] = t.Name
	t.fieldMap["dirname"] = t.Dirname
	t.fieldMap["bucket"] = t.Bucket
	t.fieldMap["cid"] = t.Cid
	t.fieldMap["etag"] = t.Etag
	t.fieldMap["content_length"] = t.ContentLength
	t.fieldMap["content_type"] = t.ContentType
	t.fieldMap["version"] = t.Version
	t.fieldMap["tags"] = t.Tags
	t.fieldMap["isdir"] = t.Isdir
	t.fieldMap["ismarker"] = t.Ismarker
	t.fieldMap["storageclass"] = t.Storageclass
	t.fieldMap["acl"] = t.Acl
}

func (t tNsObject) clone(db *gorm.DB) tNsObject {
	t.tNsObjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tNsObject) replaceDB(db *gorm.DB) tNsObject {
	t.tNsObjectDo.ReplaceDB(db)
	return t
}

type tNsObjectDo struct{ gen.DO }

func (t tNsObjectDo) Debug() *tNsObjectDo {
	return t.withDO(t.DO.Debug())
}

func (t tNsObjectDo) WithContext(ctx context.Context) *tNsObjectDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tNsObjectDo) ReadDB() *tNsObjectDo {
	return t.Clauses(dbresolver.Read)
}

func (t tNsObjectDo) WriteDB() *tNsObjectDo {
	return t.Clauses(dbresolver.Write)
}

func (t tNsObjectDo) Session(config *gorm.Session) *tNsObjectDo {
	return t.withDO(t.DO.Session(config))
}

func (t tNsObjectDo) Clauses(conds ...clause.Expression) *tNsObjectDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tNsObjectDo) Returning(value interface{}, columns ...string) *tNsObjectDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tNsObjectDo) Not(conds ...gen.Condition) *tNsObjectDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tNsObjectDo) Or(conds ...gen.Condition) *tNsObjectDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tNsObjectDo) Select(conds ...field.Expr) *tNsObjectDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tNsObjectDo) Where(conds ...gen.Condition) *tNsObjectDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tNsObjectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tNsObjectDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tNsObjectDo) Order(conds ...field.Expr) *tNsObjectDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tNsObjectDo) Distinct(cols ...field.Expr) *tNsObjectDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tNsObjectDo) Omit(cols ...field.Expr) *tNsObjectDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tNsObjectDo) Join(table schema.Tabler, on ...field.Expr) *tNsObjectDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tNsObjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tNsObjectDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tNsObjectDo) RightJoin(table schema.Tabler, on ...field.Expr) *tNsObjectDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tNsObjectDo) Group(cols ...field.Expr) *tNsObjectDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tNsObjectDo) Having(conds ...gen.Condition) *tNsObjectDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tNsObjectDo) Limit(limit int) *tNsObjectDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tNsObjectDo) Offset(offset int) *tNsObjectDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tNsObjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tNsObjectDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tNsObjectDo) Unscoped() *tNsObjectDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tNsObjectDo) Create(values ...*model.TNsObject) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tNsObjectDo) CreateInBatches(values []*model.TNsObject, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tNsObjectDo) Save(values ...*model.TNsObject) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tNsObjectDo) First() (*model.TNsObject, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsObject), nil
	}
}

func (t tNsObjectDo) Take() (*model.TNsObject, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsObject), nil
	}
}

func (t tNsObjectDo) Last() (*model.TNsObject, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsObject), nil
	}
}

func (t tNsObjectDo) Find() ([]*model.TNsObject, error) {
	result, err := t.DO.Find()
	return result.([]*model.TNsObject), err
}

func (t tNsObjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNsObject, err error) {
	buf := make([]*model.TNsObject, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tNsObjectDo) FindInBatches(result *[]*model.TNsObject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tNsObjectDo) Attrs(attrs ...field.AssignExpr) *tNsObjectDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tNsObjectDo) Assign(attrs ...field.AssignExpr) *tNsObjectDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tNsObjectDo) Joins(fields ...field.RelationField) *tNsObjectDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tNsObjectDo) Preload(fields ...field.RelationField) *tNsObjectDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tNsObjectDo) FirstOrInit() (*model.TNsObject, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsObject), nil
	}
}

func (t tNsObjectDo) FirstOrCreate() (*model.TNsObject, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsObject), nil
	}
}

func (t tNsObjectDo) FindByPage(offset int, limit int) (result []*model.TNsObject, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tNsObjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tNsObjectDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tNsObjectDo) Delete(models ...*model.TNsObject) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tNsObjectDo) withDO(do gen.Dao) *tNsObjectDo {
	t.DO = *do.(*gen.DO)
	return t
}
