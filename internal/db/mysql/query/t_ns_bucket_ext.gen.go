// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/minio/minio/internal/db/mysql/model"
)

func newTNsBucketExt(db *gorm.DB, opts ...gen.DOOption) tNsBucketExt {
	_tNsBucketExt := tNsBucketExt{}

	_tNsBucketExt.tNsBucketExtDo.UseDB(db, opts...)
	_tNsBucketExt.tNsBucketExtDo.UseModel(&model.TNsBucketExt{})

	tableName := _tNsBucketExt.tNsBucketExtDo.TableName()
	_tNsBucketExt.ALL = field.NewAsterisk(tableName)
	_tNsBucketExt.ID = field.NewInt32(tableName, "id")
	_tNsBucketExt.UUID = field.NewString(tableName, "uuid")
	_tNsBucketExt.CreatedAt = field.NewTime(tableName, "created_at")
	_tNsBucketExt.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tNsBucketExt.DeletedAt = field.NewField(tableName, "deleted_at")
	_tNsBucketExt.Name = field.NewString(tableName, "name")
	_tNsBucketExt.Tag = field.NewString(tableName, "tag")
	_tNsBucketExt.Log = field.NewString(tableName, "log")
	_tNsBucketExt.Acl = field.NewString(tableName, "acl")
	_tNsBucketExt.Policy = field.NewString(tableName, "policy")
	_tNsBucketExt.Lifecycle = field.NewString(tableName, "lifecycle")

	_tNsBucketExt.fillFieldMap()

	return _tNsBucketExt
}

type tNsBucketExt struct {
	tNsBucketExtDo tNsBucketExtDo

	ALL       field.Asterisk
	ID        field.Int32
	UUID      field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Tag       field.String
	Log       field.String
	Acl       field.String
	Policy    field.String
	Lifecycle field.String

	fieldMap map[string]field.Expr
}

func (t tNsBucketExt) Table(newTableName string) *tNsBucketExt {
	t.tNsBucketExtDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tNsBucketExt) As(alias string) *tNsBucketExt {
	t.tNsBucketExtDo.DO = *(t.tNsBucketExtDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tNsBucketExt) updateTableName(table string) *tNsBucketExt {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.UUID = field.NewString(table, "uuid")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Name = field.NewString(table, "name")
	t.Tag = field.NewString(table, "tag")
	t.Log = field.NewString(table, "log")
	t.Acl = field.NewString(table, "acl")
	t.Policy = field.NewString(table, "policy")
	t.Lifecycle = field.NewString(table, "lifecycle")

	t.fillFieldMap()

	return t
}

func (t *tNsBucketExt) WithContext(ctx context.Context) *tNsBucketExtDo {
	return t.tNsBucketExtDo.WithContext(ctx)
}

func (t tNsBucketExt) TableName() string { return t.tNsBucketExtDo.TableName() }

func (t tNsBucketExt) Alias() string { return t.tNsBucketExtDo.Alias() }

func (t *tNsBucketExt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tNsBucketExt) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["uuid"] = t.UUID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["name"] = t.Name
	t.fieldMap["tag"] = t.Tag
	t.fieldMap["log"] = t.Log
	t.fieldMap["acl"] = t.Acl
	t.fieldMap["policy"] = t.Policy
	t.fieldMap["lifecycle"] = t.Lifecycle
}

func (t tNsBucketExt) clone(db *gorm.DB) tNsBucketExt {
	t.tNsBucketExtDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tNsBucketExt) replaceDB(db *gorm.DB) tNsBucketExt {
	t.tNsBucketExtDo.ReplaceDB(db)
	return t
}

type tNsBucketExtDo struct{ gen.DO }

func (t tNsBucketExtDo) Debug() *tNsBucketExtDo {
	return t.withDO(t.DO.Debug())
}

func (t tNsBucketExtDo) WithContext(ctx context.Context) *tNsBucketExtDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tNsBucketExtDo) ReadDB() *tNsBucketExtDo {
	return t.Clauses(dbresolver.Read)
}

func (t tNsBucketExtDo) WriteDB() *tNsBucketExtDo {
	return t.Clauses(dbresolver.Write)
}

func (t tNsBucketExtDo) Session(config *gorm.Session) *tNsBucketExtDo {
	return t.withDO(t.DO.Session(config))
}

func (t tNsBucketExtDo) Clauses(conds ...clause.Expression) *tNsBucketExtDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tNsBucketExtDo) Returning(value interface{}, columns ...string) *tNsBucketExtDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tNsBucketExtDo) Not(conds ...gen.Condition) *tNsBucketExtDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tNsBucketExtDo) Or(conds ...gen.Condition) *tNsBucketExtDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tNsBucketExtDo) Select(conds ...field.Expr) *tNsBucketExtDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tNsBucketExtDo) Where(conds ...gen.Condition) *tNsBucketExtDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tNsBucketExtDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tNsBucketExtDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tNsBucketExtDo) Order(conds ...field.Expr) *tNsBucketExtDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tNsBucketExtDo) Distinct(cols ...field.Expr) *tNsBucketExtDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tNsBucketExtDo) Omit(cols ...field.Expr) *tNsBucketExtDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tNsBucketExtDo) Join(table schema.Tabler, on ...field.Expr) *tNsBucketExtDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tNsBucketExtDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tNsBucketExtDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tNsBucketExtDo) RightJoin(table schema.Tabler, on ...field.Expr) *tNsBucketExtDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tNsBucketExtDo) Group(cols ...field.Expr) *tNsBucketExtDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tNsBucketExtDo) Having(conds ...gen.Condition) *tNsBucketExtDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tNsBucketExtDo) Limit(limit int) *tNsBucketExtDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tNsBucketExtDo) Offset(offset int) *tNsBucketExtDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tNsBucketExtDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tNsBucketExtDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tNsBucketExtDo) Unscoped() *tNsBucketExtDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tNsBucketExtDo) Create(values ...*model.TNsBucketExt) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tNsBucketExtDo) CreateInBatches(values []*model.TNsBucketExt, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tNsBucketExtDo) Save(values ...*model.TNsBucketExt) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tNsBucketExtDo) First() (*model.TNsBucketExt, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucketExt), nil
	}
}

func (t tNsBucketExtDo) Take() (*model.TNsBucketExt, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucketExt), nil
	}
}

func (t tNsBucketExtDo) Last() (*model.TNsBucketExt, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucketExt), nil
	}
}

func (t tNsBucketExtDo) Find() ([]*model.TNsBucketExt, error) {
	result, err := t.DO.Find()
	return result.([]*model.TNsBucketExt), err
}

func (t tNsBucketExtDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNsBucketExt, err error) {
	buf := make([]*model.TNsBucketExt, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tNsBucketExtDo) FindInBatches(result *[]*model.TNsBucketExt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tNsBucketExtDo) Attrs(attrs ...field.AssignExpr) *tNsBucketExtDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tNsBucketExtDo) Assign(attrs ...field.AssignExpr) *tNsBucketExtDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tNsBucketExtDo) Joins(fields ...field.RelationField) *tNsBucketExtDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tNsBucketExtDo) Preload(fields ...field.RelationField) *tNsBucketExtDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tNsBucketExtDo) FirstOrInit() (*model.TNsBucketExt, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucketExt), nil
	}
}

func (t tNsBucketExtDo) FirstOrCreate() (*model.TNsBucketExt, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNsBucketExt), nil
	}
}

func (t tNsBucketExtDo) FindByPage(offset int, limit int) (result []*model.TNsBucketExt, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tNsBucketExtDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tNsBucketExtDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tNsBucketExtDo) Delete(models ...*model.TNsBucketExt) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tNsBucketExtDo) withDO(do gen.Dao) *tNsBucketExtDo {
	t.DO = *do.(*gen.DO)
	return t
}
